/*
    The `Alu` mod always sources its first argument from the value of RS1 in the register file.
    However, it may source its second argument from either RS2 or from the immediate generator.
    `AluSource` is the type of the `alu_source` output of the `Control` mod and determines which to use.
*/
enum type AluSource {
    IMM = 0w1;
    RS2 = 1w1;
}

alt type PcAdvancement {
    Next();
    Offset(Word<32>);
    Abs(Word<32>);
}

/*
    There are several instruction formats in RISC-V.
    `InstrType` tells us which we have so we can decode.
*/
enum type InstrType {
    I = 1w3;
    S = 2w3;
    B = 3w3;
    U = 4w3;
    J = 5w3;
    R = 6w3;
}

/*
    Some RISC-V instructions have a funct3 field, which tells us things like
    which operation, what kind of branch, or what size to load or store.
    `OpFunct3` tells us which operation to perform for OP and OP-IMM instructions.
*/
enum type OpFunct3 {
    ADD  = 0b000w3;
    SLL  = 0b001w3;
    SLT  = 0b010w3;
    SLTU = 0b011w3;
    XOR  = 0b100w3;
    SR   = 0b101w3;
    OR   = 0b110w3;
    AND  = 0b111w3;
}

enum type BranchFunct3 {
    BEQ  = 0b000w3;
    BNE  = 0b001w3;
    BLT  = 0b100w3;
    BGE  = 0b101w3;
    BLTU = 0b110w3;
    BGEU = 0b111w3;
}

enum type LoadFunct3 {
    LB  = 0b000w3;
    LH  = 0b001w3;
    LW  = 0b010w3;
    LBU = 0b100w3;
    LHU = 0b101w3;
}

enum type StoreFunct3 {
    SB  = 0b000w3;
    SH  = 0b001w3;
    SW  = 0b010w3;
}

enum type SystemFunct3 {
    ECALLBREAK = 0b000w3;
    CSRRW      = 0b001w3;
    CSRRS      = 0b010w3;
    CSRRC      = 0b011w3;
    CSRRWI     = 0b101w3;
    CSRRSI     = 0b110w3;
    CSRRCI     = 0b111w3;
}

enum type SystemFunct12 {
    ECALL  = 0b0000000w12;
    EBREAK = 0b0000001w12;
}

enum type Funct7 {
    ADD  = 0b0000000w7;
    SUB  = 0b0100000w7;
}

/*
    The lower 7 bits of every RISC-V instruction are the opcode.
    `Opcode` allows us to name these opcodes as they appear in the spec.
*/
enum type Opcode {
    OP      = 0b01_100_11w7;
    OP_IMM  = 0b00_100_11w7;
    LOAD    = 0b00_000_11w7;
    STORE   = 0b01_000_11w7;
    JAL     = 0b11_011_11w7;
    BRANCH  = 0b11_000_11w7;
    LUI     = 0b01_101_11w7;
    AUIPC   = 0b00_101_11w7;
    JALR    = 0b11_001_11w7;
    FENCE   = 0b00_011_11w7;
    SYSTEM  = 0b11_100_11w7;
}

enum type AluOp {
    AND =  0w4;
    OR  =  1w4;
    ADD =  2w4;
    SUB =  3w4;
    LT  =  4w4;
    LTU =  5w4;
    GE  =  6w4;
    GEU =  7w4;
    EQ  =  8w4;
    NEQ =  9w4;
    XOR = 10w4;
    SLL = 11w4;
    SRL = 12w4;
    SRA = 13w4;
}

/*
    `Top` is a simple system to demonstrate the use of `Core`.
*/
pub mod Top {
    mod core of Core;
    mod instr_mem of InstrMem;
    mod mem of MemorySubsystem;

    instr_mem.write_enable := 0w1;
    instr_mem.write_addr := 0w32;
    instr_mem.write_data := 0w32;
    instr_mem.write_mask := 0;

    mem.read_addr    := core.mem_read_addr;
    mem.write_addr   := core.mem_write_addr;
    mem.write_data   := core.mem_write_data;
    mem.write_mask   := core.mem_write_mask;
    mem.write_enable := core.mem_write_enable;

    instr_mem.read_addr := core.instr_mem_read_addr;
    core.instr_mem_read_data := instr_mem.read_data;
    core.mem_read_data := mem.read_data;
}

/*
    `Core` is the top-level processor core.
*/
pub mod Core {
    mod rf of Rf;
    mod control of Control;
    mod alu of Alu;
    mod immgen of Immgen;
    mod decoder of Decoder;
    mod ifetch of Ifetch;

    //mod riscv_decoder of RiscvDecoder;
    //riscv_decoder.in := ifetch.instr;

    outgoing ecall of Word<1>;
    outgoing ebreak of Word<1>;
    outgoing exception of Word<1>;

    outgoing instr_mem_read_addr of Word<32>;
    incoming instr_mem_read_data of Word<32>;

    outgoing mem_write_enable of Word<1>;
    outgoing mem_write_addr   of Word<32>;
    outgoing mem_write_data   of Word<32>;
    outgoing mem_read_addr    of Word<32>;
    incoming mem_read_data    of Word<32>;
    outgoing mem_write_mask   of Word<4>;


    ecall     := decoder.opcode == Opcode::SYSTEM && decoder.funct12 == word(SystemFunct12::ECALL);
    ebreak    := decoder.opcode == Opcode::SYSTEM && decoder.funct12 == word(SystemFunct12::EBREAK);
    exception := decoder.exception;

    mem_read_addr  := rf.rs1_val + immgen.imm;
    mem_write_addr := rf.rs1_val + immgen.imm;
    mem_write_data := rf.rs2_val;
    mem_write_enable := control.mem_write;
    mem_write_mask := decoder.write_mask;

    ifetch.pc_advancement := next_pc(decoder.opcode, rf.rs1_val, immgen.imm, alu.r);

    instr_mem_read_addr := ifetch.instr_mem_addr;
    ifetch.instr_mem_data := instr_mem_read_data;

    rf.rs1 := decoder.rs1;
    rf.rs2 := decoder.rs2;
    rf.rd := decoder.rd;
    rf.write_enable := control.reg_write;
    rf.write_data := if control.mem_to_reg {
        mem_to_reg_data(mem_read_data, decoder.opcode, decoder.funct3)
    } else if decoder.opcode == Opcode::LUI {
        immgen.imm
    } else if decoder.opcode == Opcode::JAL || decoder.opcode == Opcode::JALR {
        ifetch.program_counter + 4
    } else {
        alu.r
    };

    decoder.instr := ifetch.instr;
    immgen.instr := ifetch.instr;
    immgen.opcode := decoder.opcode;

    control.opcode := decoder.opcode;
    control.funct3 := decoder.funct3;
    control.funct7 := decoder.funct7;
    control.funct12 := decoder.funct12;

    alu.a := rf.rs1_val;
    alu.b := match control.alu_source {
        @IMM => immgen.imm;
        @RS2 => rf.rs2_val;
    };
    alu.op := control.alu_op;
}

fn mem_to_reg_data(data of Word<32>, opcode of Opcode, funct3 of Word<3>) -> Word<32> {
    if opcode == Opcode::LOAD {
        if funct3 == word(LoadFunct3::LB) {
            sext(data[8..0])
        } else if funct3 == word(LoadFunct3::LBU) {
            zext(data[8..0])
        } else if funct3 == word(LoadFunct3::LH) {
            sext(data[16..0])
        } else if funct3 == word(LoadFunct3::LHU) {
            zext(data[16..0])
        } else if funct3 == word(LoadFunct3::LW) {
            data
        } else {
            // TODO Impossible
            data
        }
    } else {
        data
    }
}

fn next_pc(opcode of Opcode, rs1_val of Word<32>, imm of Word<32>, alu_r of Word<32>) -> PcAdvancement {
    match opcode {
        @JALR => @Abs(rs1_val + imm);
        @JAL => @Offset(imm);
        @BRANCH =>
            if alu_r == 1 {
                @Offset(imm)
            } else {
                @Next()
            };
        otherwise => @Next();
    }
}

/*
    `Rf` is the register file.
*/
mod Rf {
    incoming rs1 of Word<5>;
    incoming rs2 of Word<5>;
    incoming rd  of Word<5>;

    incoming write_enable of Word<1>;
    incoming write_data   of Word<32>;

    outgoing rs1_val of Word<32>;
    outgoing rs2_val of Word<32>;

    reg x1 of Word<32> reset 0;
    reg x2 of Word<32> reset 0;
    reg x3 of Word<32> reset 0;
    reg x4 of Word<32> reset 0;
    reg x5 of Word<32> reset 0;
    reg x6 of Word<32> reset 0;
    reg x7 of Word<32> reset 0;
    reg x8 of Word<32> reset 0;
    reg x9 of Word<32> reset 0;
    reg x10 of Word<32> reset 0;
    reg x11 of Word<32> reset 0;
    reg x12 of Word<32> reset 0;
    reg x13 of Word<32> reset 0;
    reg x14 of Word<32> reset 0;
    reg x15 of Word<32> reset 0;
    reg x16 of Word<32> reset 0;
    reg x17 of Word<32> reset 0;
    reg x18 of Word<32> reset 0;
    reg x19 of Word<32> reset 0;
    reg x20 of Word<32> reset 0;
    reg x21 of Word<32> reset 0;
    reg x22 of Word<32> reset 0;
    reg x23 of Word<32> reset 0;
    reg x24 of Word<32> reset 0;
    reg x25 of Word<32> reset 0;
    reg x26 of Word<32> reset 0;
    reg x27 of Word<32> reset 0;
    reg x28 of Word<32> reset 0;
    reg x29 of Word<32> reset 0;
    reg x30 of Word<32> reset 0;
    reg x31 of Word<32> reset 0;

    // skip x0
    x1 <= mux(write_enable && rd == 1, write_data, x1);
    x2 <= mux(write_enable && rd == 2, write_data, x2);
    x3 <= mux(write_enable && rd == 3, write_data, x3);
    x4 <= mux(write_enable && rd == 4, write_data, x4);
    x5 <= mux(write_enable && rd == 5, write_data, x5);
    x6 <= mux(write_enable && rd == 6, write_data, x6);
    x7 <= mux(write_enable && rd == 7, write_data, x7);
    x8 <= mux(write_enable && rd == 8, write_data, x8);
    x9 <= mux(write_enable && rd == 9, write_data, x9);
    x10 <= mux(write_enable && rd == 10, write_data, x10);
    x11 <= mux(write_enable && rd == 11, write_data, x11);
    x12 <= mux(write_enable && rd == 12, write_data, x12);
    x13 <= mux(write_enable && rd == 13, write_data, x13);
    x14 <= mux(write_enable && rd == 14, write_data, x14);
    x15 <= mux(write_enable && rd == 15, write_data, x15);
    x16 <= mux(write_enable && rd == 16, write_data, x16);
    x17 <= mux(write_enable && rd == 17, write_data, x17);
    x18 <= mux(write_enable && rd == 18, write_data, x18);
    x19 <= mux(write_enable && rd == 19, write_data, x19);
    x20 <= mux(write_enable && rd == 20, write_data, x20);
    x21 <= mux(write_enable && rd == 21, write_data, x21);
    x22 <= mux(write_enable && rd == 22, write_data, x22);
    x23 <= mux(write_enable && rd == 23, write_data, x23);
    x24 <= mux(write_enable && rd == 24, write_data, x24);
    x25 <= mux(write_enable && rd == 25, write_data, x25);
    x26 <= mux(write_enable && rd == 26, write_data, x26);
    x27 <= mux(write_enable && rd == 27, write_data, x27);
    x28 <= mux(write_enable && rd == 28, write_data, x28);
    x29 <= mux(write_enable && rd == 29, write_data, x29);
    x30 <= mux(write_enable && rd == 30, write_data, x30);
    x31 <= mux(write_enable && rd == 31, write_data, x31);

    rs1_val :=
             if rs1 == 1 { x1 }
        else if rs1 == 2 { x2 }
        else if rs1 == 3 { x3 }
        else if rs1 == 4 { x4 }
        else if rs1 == 5 { x5 }
        else if rs1 == 6 { x6 }
        else if rs1 == 7 { x7 }
        else if rs1 == 8 { x8 }
        else if rs1 == 9 { x9 }
        else if rs1 == 10 { x10 }
        else if rs1 == 11 { x11 }
        else if rs1 == 12 { x12 }
        else if rs1 == 13 { x13 }
        else if rs1 == 14 { x14 }
        else if rs1 == 15 { x15 }
        else if rs1 == 16 { x16 }
        else if rs1 == 17 { x17 }
        else if rs1 == 18 { x18 }
        else if rs1 == 19 { x19 }
        else if rs1 == 20 { x20 }
        else if rs1 == 21 { x21 }
        else if rs1 == 22 { x22 }
        else if rs1 == 23 { x23 }
        else if rs1 == 24 { x24 }
        else if rs1 == 25 { x25 }
        else if rs1 == 26 { x26 }
        else if rs1 == 27 { x27 }
        else if rs1 == 28 { x28 }
        else if rs1 == 29 { x29 }
        else if rs1 == 30 { x30 }
        else if rs1 == 31 { x31 }
        else { 0w32 };

    rs2_val :=
             if rs2 == 1 { x1 }
        else if rs2 == 2 { x2 }
        else if rs2 == 3 { x3 }
        else if rs2 == 4 { x4 }
        else if rs2 == 5 { x5 }
        else if rs2 == 6 { x6 }
        else if rs2 == 7 { x7 }
        else if rs2 == 8 { x8 }
        else if rs2 == 9 { x9 }
        else if rs2 == 10 { x10 }
        else if rs2 == 11 { x11 }
        else if rs2 == 12 { x12 }
        else if rs2 == 13 { x13 }
        else if rs2 == 14 { x14 }
        else if rs2 == 15 { x15 }
        else if rs2 == 16 { x16 }
        else if rs2 == 17 { x17 }
        else if rs2 == 18 { x18 }
        else if rs2 == 19 { x19 }
        else if rs2 == 20 { x20 }
        else if rs2 == 21 { x21 }
        else if rs2 == 22 { x22 }
        else if rs2 == 23 { x23 }
        else if rs2 == 24 { x24 }
        else if rs2 == 25 { x25 }
        else if rs2 == 26 { x26 }
        else if rs2 == 27 { x27 }
        else if rs2 == 28 { x28 }
        else if rs2 == 29 { x29 }
        else if rs2 == 30 { x30 }
        else if rs2 == 31 { x31 }
        else { 0w32 };
}

/*
    `Control` is the control unit.
    It receives the decoded instruction and sends out signals which
    guide the behavior of the rest of the core.
*/
mod Control {
    incoming opcode of Opcode;
    incoming funct3 of Word<3>;
    incoming funct7 of Word<7>;
    incoming funct12 of Word<12>;

    outgoing mem_read of Word<1>;
    outgoing mem_write of Word<1>;
    outgoing mem_to_reg of Word<1>;
    outgoing alu_op of AluOp;
    outgoing alu_source of AluSource;
    outgoing reg_write of Word<1>;

    mem_read := opcode == Opcode::LOAD;
    mem_write := opcode == Opcode::STORE;
    mem_to_reg := opcode == Opcode::LOAD;

    alu_op := if opcode == Opcode::OP || opcode == Opcode::OP_IMM {
        if funct3 == word(OpFunct3::ADD) {
            AluOp::ADD
        } else if funct3 == word(OpFunct3::SLL) {
            AluOp::SLL
        } else if funct3 == word(OpFunct3::SLT) {
            AluOp::LT
        } else if funct3 == word(OpFunct3::SLTU) {
            AluOp::LTU
        } else if funct3 == word(OpFunct3::XOR) {
            AluOp::XOR
        } else if funct3 == word(OpFunct3::SR) {
            if funct7[5] {
                AluOp::SRA
            } else {
                AluOp::SRL
            }
        } else if funct3 == word(OpFunct3::OR) {
            AluOp::OR
        } else if funct3 == word(OpFunct3::AND) {
            AluOp::AND
        } else {
            ?
        }
    } else if opcode == Opcode::BRANCH {
        if funct3 == word(BranchFunct3::BEQ) {
            AluOp::EQ
        } else if funct3 == word(BranchFunct3::BNE) {
            AluOp::NEQ
        } else if funct3 == word(BranchFunct3::BLT) {
            AluOp::LT
        } else if funct3 == word(BranchFunct3::BLTU) {
            AluOp::LTU
        } else if funct3 == word(BranchFunct3::BGE) {
            AluOp::GE
        } else if funct3 == word(BranchFunct3::BGEU) {
            AluOp::GEU
        } else {
            AluOp::ADD // TODO should be impossible.
        }
    } else if opcode == Opcode::SYSTEM {
        AluOp::ADD
    } else if opcode == Opcode::JAL {
        AluOp::ADD
    } else if opcode == Opcode::JALR {
        AluOp::ADD
    } else {
        AluOp::ADD
    };

    alu_source := if opcode == Opcode::OP_IMM || opcode == Opcode::LOAD || opcode == Opcode::STORE {
        AluSource::IMM
    } else {
        AluSource::RS2
    };
    reg_write :=
        opcode == Opcode::OP ||
        opcode == Opcode::OP_IMM ||
        opcode == Opcode::LOAD ||
        opcode == Opcode::LUI ||
        opcode == Opcode::JAL ||
        opcode == Opcode::JALR;
}

/*
    `Alu` is the arithmetic logic unit.
*/
mod Alu {
    incoming a of Word<32>;
    incoming b of Word<32>;
    incoming op of AluOp;
    outgoing r of Word<32>;

    r := match op {
        @AND => a && b;
        @OR  => a || b;
        @ADD => a + b;
        @SUB => a - b;
        @XOR => a ^ b;
        @LT  => zext(lt(a, b));
        @LTU => zext(ltu(a, b));
        @GE  => zext(ge(a, b));
        @GEU => zext(geu(a, b));
        @EQ  => zext(a == b);
        @NEQ => zext(a != b);
        @SLL => sll(a, b[5..0]);
        @SRL => srl(a, b[5..0]);
        @SRA => sra(a, b[5..0]);
    };
}

fn sll(a of Word<32>, b of Word<5>) -> Word<32> {
    if b == 0 { a }
    else if b ==  1 { cat(a[31..0],  0w1) }
    else if b ==  2 { cat(a[30..0],  0w2) }
    else if b ==  3 { cat(a[29..0],  0w3) }
    else if b ==  4 { cat(a[28..0],  0w4) }
    else if b ==  5 { cat(a[27..0],  0w5) }
    else if b ==  6 { cat(a[26..0],  0w6) }
    else if b ==  6 { cat(a[26..0],  0w6) }
    else if b ==  7 { cat(a[25..0],  0w7) }
    else if b ==  8 { cat(a[24..0],  0w8) }
    else if b ==  9 { cat(a[23..0],  0w9) }
    else if b == 10 { cat(a[22..0], 0w10) }
    else if b == 11 { cat(a[21..0], 0w11) }
    else if b == 12 { cat(a[20..0], 0w12) }
    else if b == 13 { cat(a[19..0], 0w13) }
    else if b == 14 { cat(a[18..0], 0w14) }
    else if b == 15 { cat(a[17..0], 0w15) }
    else if b == 16 { cat(a[16..0], 0w16) }
    else if b == 17 { cat(a[15..0], 0w17) }
    else if b == 18 { cat(a[14..0], 0w18) }
    else if b == 19 { cat(a[13..0], 0w19) }
    else if b == 20 { cat(a[12..0], 0w20) }
    else if b == 21 { cat(a[11..0], 0w21) }
    else if b == 22 { cat(a[10..0], 0w22) }
    else if b == 23 { cat(a[9..0],  0w23) }
    else if b == 24 { cat(a[8..0],  0w24) }
    else if b == 25 { cat(a[7..0],  0w25) }
    else if b == 26 { cat(a[6..0],  0w26) }
    else if b == 27 { cat(a[5..0],  0w27) }
    else if b == 28 { cat(a[4..0],  0w28) }
    else if b == 29 { cat(a[3..0],  0w29) }
    else if b == 30 { cat(a[2..0],  0w30) }
    else { cat(a[0], 0w31) }
}

fn srl(a of Word<32>, b of Word<5>) -> Word<32> {
    if b == 0 { a }
    else if b ==  1 { zext(a[32.. 1]) }
    else if b ==  2 { zext(a[32.. 2]) }
    else if b ==  3 { zext(a[32.. 3]) }
    else if b ==  4 { zext(a[32.. 4]) }
    else if b ==  5 { zext(a[32.. 5]) }
    else if b ==  6 { zext(a[32.. 6]) }
    else if b ==  7 { zext(a[32.. 7]) }
    else if b ==  8 { zext(a[32.. 8]) }
    else if b ==  9 { zext(a[32.. 9]) }
    else if b == 10 { zext(a[32..10]) }
    else if b == 11 { zext(a[32..11]) }
    else if b == 12 { zext(a[32..12]) }
    else if b == 13 { zext(a[32..13]) }
    else if b == 14 { zext(a[32..14]) }
    else if b == 15 { zext(a[32..15]) }
    else if b == 16 { zext(a[32..16]) }
    else if b == 17 { zext(a[32..17]) }
    else if b == 18 { zext(a[32..18]) }
    else if b == 19 { zext(a[32..19]) }
    else if b == 20 { zext(a[32..20]) }
    else if b == 21 { zext(a[32..21]) }
    else if b == 22 { zext(a[32..22]) }
    else if b == 23 { zext(a[32..23]) }
    else if b == 24 { zext(a[32..24]) }
    else if b == 25 { zext(a[32..25]) }
    else if b == 26 { zext(a[32..26]) }
    else if b == 27 { zext(a[32..27]) }
    else if b == 28 { zext(a[32..28]) }
    else if b == 29 { zext(a[32..29]) }
    else if b == 30 { zext(a[32..30]) }
    else { zext(a[31]) }
}

fn sra(a of Word<32>, b of Word<5>) -> Word<32> {
    if b == 0 { a }
    else if b ==  1 { sext(a[32.. 1]) }
    else if b ==  2 { sext(a[32.. 2]) }
    else if b ==  3 { sext(a[32.. 3]) }
    else if b ==  4 { sext(a[32.. 4]) }
    else if b ==  5 { sext(a[32.. 5]) }
    else if b ==  6 { sext(a[32.. 6]) }
    else if b ==  7 { sext(a[32.. 7]) }
    else if b ==  8 { sext(a[32.. 8]) }
    else if b ==  9 { sext(a[32.. 9]) }
    else if b == 10 { sext(a[32..10]) }
    else if b == 11 { sext(a[32..11]) }
    else if b == 12 { sext(a[32..12]) }
    else if b == 13 { sext(a[32..13]) }
    else if b == 14 { sext(a[32..14]) }
    else if b == 15 { sext(a[32..15]) }
    else if b == 16 { sext(a[32..16]) }
    else if b == 17 { sext(a[32..17]) }
    else if b == 18 { sext(a[32..18]) }
    else if b == 19 { sext(a[32..19]) }
    else if b == 20 { sext(a[32..20]) }
    else if b == 21 { sext(a[32..21]) }
    else if b == 22 { sext(a[32..22]) }
    else if b == 23 { sext(a[32..23]) }
    else if b == 24 { sext(a[32..24]) }
    else if b == 25 { sext(a[32..25]) }
    else if b == 26 { sext(a[32..26]) }
    else if b == 27 { sext(a[32..27]) }
    else if b == 28 { sext(a[32..28]) }
    else if b == 29 { sext(a[32..29]) }
    else if b == 30 { sext(a[32..30]) }
    else { sext(a[31]) }
}

fn ltu(a of Word<32>, b of Word<32>) -> Word<1> {
    a <. b
}

fn lt(a of Word<32>, b of Word<32>) -> Word<1> {
    if a[31] && !b[31] {
        1
    } else if !a[31] && b[31] {
        0
    } else {
        a <. b
    }
}

fn geu(a of Word<32>, b of Word<32>) -> Word<1> {
    a == b || b <. a
}

fn ge(a of Word<32>, b of Word<32>) -> Word<1> {
    if a[31] && !b[31] {
        0
    } else if !a[31] && b[31] {
        1
    } else {
        a == b || b <. a
    }
}

/*
    `Immgen` is the immediate generator.
    It takes the instruction and calculates the 32-bit immediate
*/
mod Immgen {
    incoming instr of Word<32>;
    incoming opcode of Opcode;
    outgoing imm of Word<32>;

    node typ of InstrType;
    typ := match opcode {
        @OP     => InstrType::R;
        @OP_IMM => InstrType::I;
        @LOAD   => InstrType::I;
        @STORE  => InstrType::S;
        @JAL    => InstrType::J;
        @BRANCH => InstrType::B;
        @LUI    => InstrType::U;
        @AUIPC  => InstrType::U;
        @JALR   => InstrType::I;
        @FENCE  => InstrType::I;
        @SYSTEM => InstrType::I;
    };

    imm := match typ {
        @I => sext(cat(instr[31], instr[32..20]));
        @S => sext(cat(instr[31], instr[32..25], instr[12..7]));
        @B => sext(cat(instr[31], instr[7], instr[31..25], instr[12..8], 0w1));
        @U => sext(cat(instr[32..12], 0w12));
        @J => sext(cat(instr[31], instr[20..12], instr[20], instr[31..21], 0w1));
        @R => 0;
    };
}

/*
    `Decoder` is the instruction decoder.
    It takes the instruction parses it into its relevant pieces.
    Not all pieces are guaranteed to be meaningful for all instructions.
*/
mod Decoder {
    incoming instr of Word<32>;

    outgoing opcode of Opcode;
    outgoing rd     of Word<5>;
    outgoing rs1    of Word<5>;
    outgoing rs2    of Word<5>;
    outgoing funct3     of Word<3>;
    outgoing funct7     of Word<7>;
    outgoing funct12    of Word<12>;
    outgoing exception  of Word<1>;
    outgoing write_mask of Word<4>;

    write_mask :=
        let funct3 = instr[15..12];
        if funct3 == word(StoreFunct3::SB) {
            0b0001
        } else if funct3 == word(StoreFunct3::SH) {
            0b0011
        } else {
            0b1111
        };

    exception := match maybe_opcode {
        @Valid(_o) => 0;
        @Invalid  => 1;
    };

    node maybe_opcode of Valid<Opcode>;
    maybe_opcode := trycast(instr[7..0]);

    opcode := match maybe_opcode {
        @Valid(o) => o;
        @Invalid  => Opcode::OP;
    };

    rd      := instr[12..7];
    funct3  := instr[15..12];
    rs1     := instr[20..15];
    rs2     := instr[25..20];
    funct7  := instr[32..25];
    funct12 := instr[32..20];
}

/*
    `Ifetch` is the instruction fetch unit.
    It maintains the program counter (`pc`).
    It receives signals for when to branch.
    It emits the 32-bit instruction as `instr`.

*/
mod Ifetch {
    incoming pc_advancement of PcAdvancement;

    outgoing instr_mem_addr of Word<32>;
    incoming instr_mem_data of Word<32>;

    outgoing instr of Word<32>;
    outgoing program_counter of Word<32>;

    program_counter := pc;

    reg pc of Word<32> reset 0;
    instr_mem_addr := pc;

    pc <= match pc_advancement {
        @Next() => pc + 4;
        @Offset(offset) => pc + offset;
        @Abs(next_pc) => next_pc;
    };

    instr := instr_mem_data;
}

/*
    `MemorySubsystem` dispatches reads and writes to either system memory or a device.
    [0000_0000 - 0001_0000] System Memory
    [0001_0000 - 0001_0001] Terminal
*/
mod MemorySubsystem {
    incoming read_addr of Word<32>;
    outgoing read_data of Word<32>;

    incoming write_enable of Word<1>;
    incoming write_addr of Word<32>;
    incoming write_data of Word<32>;
    incoming write_mask of Word<4>;

    mod mem of DataMem;

    mem.write_enable := write_addr <. 0x10000w32 && write_enable;
    mem.write_addr := write_addr;
    mem.write_data := write_data;
    mem.write_mask := write_mask;
    mem.read_addr := read_addr;
    read_data := if read_addr <. 0x10000w32 {
        mem.read_data
    } else {
        0w32
    };

    mod term of Terminal;

    term.out_valid := write_enable && write_addr == 0x10000w32;
    term.out_data := write_data;
}

//ext mod RiscvDecoder {
//    incoming in of Word<32>;
//}

ext mod InstrMem {
    incoming read_addr of Word<32>;
    outgoing read_data of Word<32>;

    incoming write_enable of Word<1>;
    incoming write_addr of Word<32>;
    incoming write_data of Word<32>;
    incoming write_mask of Word<4>;
}

ext mod DataMem {
    incoming read_addr of Word<32>;
    outgoing read_data of Word<32>;

    incoming write_enable of Word<1>;
    incoming write_addr of Word<32>;
    incoming write_data of Word<32>;
    incoming write_mask of Word<4>;
}

ext mod Terminal {
    incoming out_data of Word<32>;
    incoming out_valid of Word<1>;
}
