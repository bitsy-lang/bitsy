// Valid<S> is used when a signal may or may not be valid.
enum type Valid<S : Shape>
    @Invalid
    @Valid of Bit
end

enum type State<n: Nat>
    @Idle
    @Running of Tuple<Word<n>, Foo>
end

struct type Foo
    field bar : Word<4>
    field baz : State<3>
end

pub mod Top
    incoming in  : Word<8>@d
    outgoing out : Word<8>@d

    pub wire io.out <= {
        let x : Word<3> = 314;
        let t = 314;
        io.in + 1
    }
end

enum type UartSenderState
    @Idle
    @Sending of Word<4>
end

pub mod UartSender
    outgoing tx : Bit @ d

    reg state of UartSenderState @ d

    wire state.set <= {
        match state {
            @Idle => 0
            @Sending(n) => 1
            otherwise => 2
        }
    }
end
