// Valid<S> is used when a signal may or may not be valid.
enum type Valid<S : Shape>
    @Invalid
    @Valid of Bit
end

enum type ValidBit
    @Invalid
    @Valid of Bit
end

enum type State
    @Idle
    @Running of Tuple<Word<8>, Foo>
end

pub mod Top
    incoming in  : Word<8> @ d
    outgoing out : Word<8> @ d

    pub reg state of State @ d

    pub wire state.set <= {
        @Running(tuple(15, ${ bar = 0, baz = false }))
    }

    pub wire io.out <= { 255 }
end

enum type UartSenderState
    @Idle
    @Sending of Word<4>
end

pub mod UartSender
    outgoing tx : Bit @ d

    reg state of UartSenderState @ d

    wire state.set <= {
        @Sending(15)
    }
end

mod Bar
  outgoing out : Tuple<Bit, Bit> @ d

  wire io.out <= {
      tuple(true, false)
  }
end

mod Incrementer
  incoming in0 : Word<8> @ d
  incoming in1 : Word<8> @ d
  outgoing out : Word<10> @ d

  wire io.out <= { io.in0 + io.in1 + 1}
end

struct type Foo
    field bar : Word<4>
    field baz : Bit
end

mod Structs
    incoming in  : ValidBit @ d
    incoming in1 : Word<8> @ d
    outgoing out : Bit @ d

    wire io.out <= {
        match io.in {
            @Invalid => false;
            @Valid(bit) => bit;
        }
    }

end
