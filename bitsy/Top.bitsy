struct shape Foo
    field baz of ValidBit
    field bar of Word<8>
end

// Valid<S> is used when a signal may or may not be valid.
enum shape Valid<S of Shape>
    @Invalid
    @Valid of Bit
end

enum shape ValidBit
    @Invalid
    @Valid of Bit
end

enum shape State
    @Idle
    @Running of Tuple<Word<8>, Foo>
end

pub mod Top
    port io
        incoming in  of Word<8> @ d
        outgoing out of Word<8> @ d

    pub reg b of Bit @ d
    pub reg w1 of Word<1> @ d init 0
    pub reg w2 of Word<1> @ d init 1

    pub reg state of State @ d
        init @Idle

    pub wire b.set <= w1.val == w2.val
    pub wire state.set <= @Running(tuple(15, ${ bar = 0, baz = @Valid(false) }))
    pub wire io.out <= 255
end

enum shape UartSenderState
    @Idle
    @Sending of Word<4>
end

pub mod UartSender
    port io
        outgoing tx of Bit @ d

    reg state of UartSenderState @ d

    wire state.set <= @Sending(15)
end

mod Bar
    port io
        outgoing out of Tuple<Bit, Bit> @ d

    wire io.out <= tuple(true, false)
end

mod Incrementer
  port io
      incoming in0 of Word<8> @ d
      incoming in1 of Word<8> @ d
      outgoing out of Word<9> @ d

  wire io.out <= io.in0 + io.in1
end

mod Structs
    port io
        incoming in  of ValidBit @ d
        incoming in1 of Word<8> @ d
        outgoing out of Bit @ d

    wire io.out <= match io.in {
        @Invalid => false;
        @Valid(bit) => bit;
    }
end
