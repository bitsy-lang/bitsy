use super::*;

grammar(source_info: &SourceInfo);

pub Package: Package = {
    <imports:Import*> <items:Item*> => Package {
        imports,
        items,
    },
}

Import: String = {
    "import" <filename:Str> => filename,
}

Item: Item = {
    <m:ModDef> => Item::ModDef(m),
    <e:EnumTypeDef> => Item::EnumTypeDef(e),
    <e:StructTypeDef> => Item::StructTypeDef(e),
    <e:AltTypeDef> => Item::AltTypeDef(e),
    <m:ExtDef> => Item::ExtDef(m),
    <f:FnDef> => Item::FnDef(f),
}

ModDef: ModDef = {
    <ll:@L> <vis:"pub"?> "mod" <id:Id> "{"
        <decls:Decl*>
    "}" <rr:@R> => {
        let mut children = vec![];

        for decl in decls {
            children.push(decl);
        }

        ModDef(Span::from(source_info, ll, rr), id, children)
    },
}

ExtDef: ModDef = {
    <ll:@L> "ext" "mod" <id:Id> "{"
        <decls:Decl*>
    "}" <rr:@R> => {
        let mut children = vec![];

        for decl in decls {
            children.push(decl);
        }

        ModDef(Span::from(source_info, ll, rr), id, children)
    },
}

EnumTypeDef: EnumTypeDef = {
    <ll:@L> <vis:"pub"?> "enum" "type" <name:Id> "{"
        <values:(Id "=" WordLit ";")*>
    "}" <rr:@R> => {
        EnumTypeDef {
            name,
            values: values.iter().map(|(n, _, v, _)| (n.clone(), v.clone())).collect::<Vec<_>>(),
            span: Span::from(source_info, ll, rr),
        }
    },
}

StructTypeDef: StructTypeDef = {
    <ll:@L> <vis:"pub"?> "struct" "type" <name:Id> "{"
        <fields:(Id "of" Type ";")*>
    "}" <rr:@R> => {
        StructTypeDef {
            name,
            fields: fields.iter().map(|(name, _, typ, _)| (name.clone(), typ.clone())).collect::<Vec<_>>(),
            span: Span::from(source_info, ll, rr),
        }
    },
}

AltTypeDef: AltTypeDef = {
    <ll:@L> <vis:"pub"?> "alt" "type" <name:Id> "{"
        <alts:(Id "(" TypeList ")" ";")*>
    "}" <rr:@R> => {
        AltTypeDef {
            name,
            alts: alts.iter().map(|(name, _, typs, _, _)| (name.clone(), typs.clone())).collect::<Vec<_>>(),
            span: Span::from(source_info, ll, rr),
        }
    },
}

TypeList: Vec<Type> = {
    <args:((Type ("," Type)* ","?)?)> => {
        if let Some((typ, args, _comma)) = args {
            let mut results = vec![typ];
            for (_comma, typ) in args {
                results.push(typ);
            }
            results
        } else {
            vec![]
        }
    },
}

FnDef: FnDef = {
    <ll:@L> "fn" <name:Id> <type_args:("<" TypeArgList ">")?> "(" <args:ArgList> ")" "->" <ret:Type> "{"
        <body:Expr>
    "}" <rr:@R> => {

        let type_args = if let Some((_langle, args, _rangle)) = type_args {
            args
        } else {
            vec![]
        };
        FnDef {
            name,
            type_args,
            args,
            ret,
            body: *body,
            span: Span::from(source_info, ll, rr),
        }
    },
}

TypeArgList: Vec<(Ident, Kind)> = {
    <args:((Id "of" Kind ("," Id "of" Kind)* ","?)?)> => {
        if let Some((name, _of, kind, args, _comma)) = args {
            let mut results = vec![(name, kind)];
            for (_comma, name, _of, typ) in args {
                results.push((name, typ));
            }
            results
        } else {
            vec![]
        }
    },
}

Kind: Kind = {
    "Nat"  => Kind::Nat,
    "Type" => Kind::Type,
}

ArgList: Vec<(Ident, Type)> = {
    <args:((Id "of" Type ("," Id "of" Type)* ","?)?)> => {
        if let Some((name, _of, typ, args, _comma)) = args {
            let mut results = vec![(name, typ)];
            for (_comma, name, _of, typ) in args {
                results.push((name, typ));
            }
            results
        } else {
            vec![]
        }
    },
}


Decl: Decl  = {
    <ll:@L> "incoming" <id:Id> "of" <typ:Type> ";" <rr:@R> => Decl::Incoming(Span::from(source_info, ll, rr), id, typ),
    <ll:@L> "outgoing" <id:Id> "of" <typ:Type> ";" <rr:@R> => Decl::Outgoing(Span::from(source_info, ll, rr), id, typ),
    <ll:@L> "node" <id:Id> "of" <typ:Type> ";" <rr:@R> => Decl::Node(Span::from(source_info, ll, rr), id, typ),
    <ll:@L> "reg" <id:Id>  "of" <typ:Type> <reset_val:("reset" Expr)?> ";" <rr:@R> => Decl::Reg(Span::from(source_info, ll, rr), id, typ, reset_val.map(|opt| opt.1)),
    <ll:@L> <when:When> <rr:@R> => Decl::When(Span::from(source_info, ll, rr), when),
    <m:Mod> => m,
    <m:ModInst> => m,
    <ll:@L> <wire:Wire> <rr:@R> => Decl::Wire(Span::from(source_info, ll, rr), wire),
}

When: When = {
    "when" <e:Expr> "{"
        <wires:Wire*>
    "}" => When(e, wires),
}

Mod: Decl = {
    <ll:@L> "mod" <id:Id> "{"
        <decls:Decl*>
    "}" <rr:@R> => {
        let mut children = vec![];

        for decl in decls {
            children.push(decl);
        }

        Decl::Mod(Span::from(source_info, ll, rr), id, children)
    },
}

Wire: Wire = {
    <ll:@L> <target:Target> ":=" <e:Expr> ";" <rr:@R> => Wire(Span::from(source_info, ll, rr), target, e, WireType::Direct),
    <ll:@L> <target:Target> "<=" <e:Expr> ";" <rr:@R> => Wire(Span::from(source_info, ll, rr), target, e, WireType::Latch),
    <ll:@L> <target:Target> "<=!" <e:Expr> ";" <rr:@R> => Wire(Span::from(source_info, ll, rr), target, e, WireType::Proc),
}

ModInst: Decl = {
    <ll:@L> "mod" <id:Id> "of" <modname:Id> ";" <rr:@R> => Decl::ModInst(Span::from(source_info, ll, rr), id, modname),
}

Expr: Box<Expr> = {
    <e:ExprLet> => e,
    <e:ExprOr> => e,
}

ExprOr: Box<Expr> = {
    <ll:@L> <e1:ExprAnd> "||" <e2:ExprOr> <rr:@R> => Box::new(Expr::BinOp(Span::from(source_info, ll, rr), BinOp::Or, e1, e2)),
    <ll:@L> <e1:ExprAnd> "^" <e2:ExprOr> <rr:@R> => Box::new(Expr::BinOp(Span::from(source_info, ll, rr), BinOp::Xor, e1, e2)),
    <e:ExprAnd> => e,
}

ExprAnd: Box<Expr> = {
    <ll:@L> <e1:ExprNot> "&&" <e2:ExprAnd> <rr:@R> => Box::new(Expr::BinOp(Span::from(source_info, ll, rr), BinOp::And, e1, e2)),
    <e:ExprNot> => e,
}

ExprNot: Box<Expr> = {
    <ll:@L> "!" <e:ExprEq> <rr:@R> => Box::new(Expr::UnOp(Span::from(source_info, ll, rr), UnOp::Not, e)),
    <e:ExprEq> => e,
}

ExprEq: Box<Expr> = {
    <ll:@L> <e1:ExprAdd> "==" <e2:ExprEq> <rr:@R> => Box::new(Expr::BinOp(Span::from(source_info, ll, rr), BinOp::Eq,  e1, e2)),
    <ll:@L> <e1:ExprAdd> "!=" <e2:ExprEq> <rr:@R> => Box::new(Expr::BinOp(Span::from(source_info, ll, rr), BinOp::Neq, e1, e2)),
    <ll:@L> <e1:ExprAdd> "<." <e2:ExprEq> <rr:@R> => Box::new(Expr::BinOp(Span::from(source_info, ll, rr), BinOp::Lt, e1, e2)),
    <e:ExprAdd> => e,
}

ExprAdd: Box<Expr> = {
    <ll:@L> <e1:ExprCall> "+" <e2:ExprAdd> <rr:@R> => Box::new(Expr::BinOp(Span::from(source_info, ll, rr), BinOp::Add, e1, e2)),
    <ll:@L> <e1:ExprCall> "+%" <e2:ExprAdd> <rr:@R> => Box::new(Expr::BinOp(Span::from(source_info, ll, rr), BinOp::AddCarry, e1, e2)),
    <ll:@L> <e1:ExprCall> "-" <e2:ExprAdd> <rr:@R> => Box::new(Expr::BinOp(Span::from(source_info, ll, rr), BinOp::Sub, e1, e2)),
    <e:ExprCall> => e,
}

ExprCall: Box<Expr> = {
    <ll:@L> "[" <es:ExprList> "]" <rr:@R> => Box::new(Expr::Vec(Span::from(source_info, ll, rr), es)),
    <ll:@L> "[" <e:Expr> ";" <n:Nat> "]" <rr:@R> => Box::new(Expr::Vec(Span::from(source_info, ll, rr), vec![*e; n as usize])),
    <ll:@L> <name:Ctor> <rr:@R> =>  Box::new(Expr::Call(Span::from(source_info, ll, rr), name, vec![], vec![])),
    <ll:@L> <name:Ctor> "(" <es:ExprList> ")" <rr:@R> =>  Box::new(Expr::Call(Span::from(source_info, ll, rr), name, vec![], es)),
    <ll:@L> <name:Id> <params:("<" TypeParamList ">")?> "(" <es:ExprList> ")" <rr:@R> => {
        let params = if let Some((_langle, params, _rangle)) = params {
            params
        } else {
            vec![]
        };
        Box::new(Expr::Call(Span::from(source_info, ll, rr), name, params, es))
    },
    <e:StructCtor> => e,
    <e:ExprDot> => e,
}

StructCtor: Box<Expr> = {
    <ll:@L> "{" <fields:FieldExprList> "}" <rr:@R> => {
        let fields = fields.iter().map(|(name, e)| (name.to_string(), Box::new(e.clone()))).collect();
        Box::new(Expr::Struct(Span::from(source_info, ll, rr), fields))
    },
}

FieldExprList: Vec<(String, Expr)> = {
    <fields:((Id "=" Expr ("," Id "=" Expr)* ","?)?)> => {
        if let Some((name, _eqsign, expr, fields, _comma)) = fields {
            let mut results = vec![(name.to_string(), *expr)];
            for (_comma, name, _eqsign, expr) in fields {
                results.push((name.to_string(), *expr));
            }
            results
        } else {
            vec![]
        }
    },
}

ExprList: Vec<Expr> = {
    <exprs:((Expr ("," Expr)* ","?)?)> => {
        if let Some((expr, exprs, _comma)) = exprs {
            let mut results = vec![*expr];
            for (_comma, expr) in exprs {
                results.push(*expr);
            }
            results
        } else {
            vec![]
        }
    },
}

ExprDot: Box<Expr> = {
    <ll:@L> <e:ExprDot> "." <id:Id> <rr:@R> => Box::new(Expr::Dot(Span::from(source_info, ll, rr), e, id)),
    <ll:@L> <e:ExprDot> "->" <field:Id> <rr:@R> => Box::new(Expr::IdxField(Span::from(source_info, ll, rr), e, field.clone())),
    <ll:@L> <e:ExprDot> "[" <i:Nat> "]" <rr:@R> => Box::new(Expr::Idx(Span::from(source_info, ll, rr), e, i)),
    <ll:@L> <e:ExprDot> "[" <j:Nat> ".." <i:Nat> "]" <rr:@R> => Box::new(Expr::IdxRange(Span::from(source_info, ll, rr), e, j, i)),
    <e:ExprBase> => e,
}

ExprBase: Box<Expr> = {
    <e:ExprLit> => e,
    <e:ExprIf> => e,
    <e:ExprMatch> => e,
    <e:ExprHole> => e,
    <e:ExprId> => e,
    "(" <e:Expr> ")" => e,
}

ExprHole: Box<Expr> = {
    <ll:@L> "?" <name:Id?> <rr:@R> => Box::new(Expr::Hole(Span::from(source_info, ll, rr), name)),
}

ExprIf: Box<Expr> = {
    <ll:@L> "if" <cond:Expr> "{"
        <e1:Expr>
    <elseifs:("}" "else" "if" Expr "{" Expr)*>
    "}" "else" "{"
        <elseexpr:Expr>
    "}" <rr:@R> => {
        let mut result = elseexpr;

        for (_, _, _, elseif_cond, _, elseif_body) in elseifs.into_iter().rev() {
            result = Box::new(Expr::If(Span::from(source_info, ll, rr), elseif_cond, elseif_body, result));
        }

        Box::new(Expr::If(Span::from(source_info, ll, rr), cond, e1, result))
    },
}

ExprLet: Box<Expr> = {
    <ll:@L> "let" <x:Id> <ascription:("of" Type)?> "=" <e:Expr> ";"
    <b:Expr> <rr:@R> => {
        let type_ascription = ascription.map(|(_of, typ)| typ);
        Box::new(Expr::Let(Span::from(source_info, ll, rr), x, type_ascription, e, b))
    },
}

ExprLit: Box<Expr> = {
    <ll:@L> <typ:Type> "::" <name:Id> <rr:@R> => Box::new(Expr::Enum(Span::from(source_info, ll, rr), typ, name.to_string())),

    <ll:@L> <lit:WordLit> <rr:@R> => {
        let WordLit(w, v) = lit;
        Box::new(Expr::Word(Span::from(source_info, ll, rr), w, v))
    },
}

ExprMatch: Box<Expr> = {
    <ll:@L> "match" <e:Expr> "{"
        <arms:MatchArm*>
    "}" <rr:@R> => {
        Box::new(Expr::Match(Span::from(source_info, ll, rr), e, arms))
    },
}

MatchArm: MatchArm = {
    <pat:Pat> "=>" <e:Expr> ";" => MatchArm(pat, e),
}

Pat: Pat = {
    <id:Ctor> => Pat::At(id.as_str()[1..].to_string(), vec![]),
    <id:Ctor> "(" <subpats:PatList> ")" => {
        Pat::At(id.as_str()[1..].to_string(), subpats)
    },
    <id:Id> => Pat::Bind(id.to_string()),
    "otherwise" => Pat::Otherwise,
}

PatList: Vec<Pat> = {
    <pats:((Pat ("," Pat)* ","?)?)> => {
        if let Some((pat, pats, _comma)) = pats {
            let mut results = vec![pat];
            for (_comma, pat) in pats {
                results.push(pat);
            }
            results
        } else {
            vec![]
        }
    },
}

ExprId: Box<Expr> = {
    <ll:@L> <id:Id> <rr:@R> => Box::new(Expr::Ident(Span::from(source_info, ll, rr), id)),
}

WordLit: WordLit = {
    <n:Nat> => WordLit(None, n),

    <lit:r"[0-9][_0-9]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = parts[0].parse().unwrap();
        let width = parts[1].parse().unwrap();
        WordLit(Some(width), v)
    },

    <lit:r"0b[0-1][_0-1]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = u64::from_str_radix(&parts[0][2..], 2).unwrap();
        let width = parts[1].parse().unwrap();
        WordLit(Some(width), v)
    },

    <lit:r"0x[0-9a-fA-F][_0-9a-fA-F]*w[0-9]+"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        let parts = lit_nounders.split("w").collect::<Vec<_>>();
        let v = u64::from_str_radix(&parts[0][2..], 16).unwrap();
        let width = parts[1].parse().unwrap();
        WordLit(Some(width), v)
    },
}

Type: Type = {
    "Word" "<" <n:Nat> ">" => Type::Word(n),
    "Vec" "<" <typ:Type> "," <n:Nat> ">" => Type::Vec(Box::new(typ), n),
    "Valid" "<" <typ:Type> ">" => Type::Valid(Box::new(typ)),
    <id:Id> <params:("<" TypeParamList ">")?> => {
        let params = if let Some((_langle, params, _rangle)) = params {
            params
        } else {
            vec![]
        };
        Type::TypeRef(id, params)
    },
}

TypeParam: TypeParam = {
    <n:Nat> => TypeParam::Nat(n),
    <typ:Type> => TypeParam::Type(typ),
}

TypeParamList: Vec<TypeParam> = {
    <params:((TypeParam ("," TypeParam)* ","?)?)> => {
        if let Some((param, params, _comma)) = params {
            let mut results = vec![param];
            for (_comma, param) in params {
                results.push(param);
            }
            results
        } else {
            vec![]
        }
    },
}

Target: Target = {
    <id:Id> "." <port:Id> => Target::Nonlocal(id, port),
    <id:Id> => Target::Local(id),
}

Nat: u64 = {
    <lit:r"[0-9][_0-9]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        lit_nounders.parse().unwrap()
    },
    <lit:r"0b[0-9][_0-9]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        u64::from_str_radix(&lit_nounders[2..], 2).unwrap()
    },
    <lit:r"0x[0-9][_0-9]*"> => {
        let lit_nounders: String = lit.chars().filter(|&c| c != '_').collect();
        u64::from_str_radix(&lit_nounders[2..], 16).unwrap()
    },
}

Str: String = {
    <s:r#""[^"]*""#> => s[1..s.len()-1].to_string(),
}

Id: Ident = {
    <ll:@L> <id:r"[_A-Za-z][_A-Za-z0-9]*"> <rr:@R> => {
        let span = Span::from(source_info, ll, rr);
        Ident {
            name: id.to_string(),
            span,
        }
    },
}

Ctor: Ident = {
    <rr:@R> <id:r"@[_A-Za-z][_A-Za-z0-9]*"> <ll:@L> => {
        let span = Span::from(source_info, ll, rr);
        Ident {
            name: id.to_string(),
            span,
        }
    },
}

match {
    r"//[^\n\r]*[\r\n]" => {},
    r"[\r\n]*" => {},
    r"/\*[^*]*\*/" => {},
    r" " => {},
    _,
}
