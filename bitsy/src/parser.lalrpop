use crate::ast::*;
use crate::common::*;
use crate::context::Context;

grammar;


////////////////////////////////////////////////////////////////////////////////
// Top-level
////////////////////////////////////////////////////////////////////////////////

pub Namespace: Namespace = {
    <decls:Decl*> => Namespace {
        decls,
    }
}

pub Decl: Decl = {
    <mod_def:ModDef> => {
        Decl::ModDef(mod_def)
    },
    <enum_def:EnumDef> => {
        Decl::EnumDef(enum_def)
    },
    <struct_def:StructDef> => {
        Decl::StructDef(struct_def)
    },
    <fn_def:FnDef> => {
        Decl::FnDef(fn_def)
    },
}


////////////////////////////////////////////////////////////////////////////////
// Mod Decls
////////////////////////////////////////////////////////////////////////////////

pub ModDef: ModDef = {
    <visibility:Visibility> "mod" <name:Ident> <params:TypeDefParams?>
        <io_port: TerminalDecl>
        <components: Component*>
        <wires: Wire*>
    "end"
    => {
        ModDef {
            name,
            visibility,
            params: Context::from(params.unwrap_or(vec![])),
            ports: vec![io_port],
            components,
            wires,
        }
    },
}

pub TerminalDecl: Port = {
    <pins:Pin*> => Port("io".to_string(), pins),
}

pub Pin: Pin = {
    <direction:Direction> <name:Ident> "of" <shape:Shape>
    => Pin(name, direction, shape, DomainRef::default())
}

pub Direction: Direction = {
    "incoming" => Direction::Incoming,
    "outgoing" => Direction::Outgoing,
}

pub Component: Component = {
    <visibility:Visibility> "reg" <ident:Ident> "of" <shape:Shape> <domain:("@" Domain)?> <init:RegInit?> => {
        Component::Reg(
            ident,
            Visibility::Public,
            RegComponent {
                shape,
                domain: DomainRef::default(),
                init,
            }
        )
    },

    <visibility:Visibility> "mod" <ident:Ident> "of" <mod_def_ref:ModDefRef> => {
        Component::Mod(
            ident,
            Visibility::Public,
            ModComponent {
                mod_def_ref,
            }
        )
    },

    <visibility:Visibility> "gate" <ident:Ident> "of" <gate_ref:GateRef> => {
        Component::Gate(
            ident,
            Visibility::Public,
            GateComponent {
                gate_ref,
            }
        )
    },
}

pub RegInit: Box<Expr> = {
    "init" <expr: Expr> => expr
}

pub Wire: Wire = {
    <visibility:Visibility> "wire" <sink:TerminalRef> "<=" <expr:Expr> => {
        Wire(visibility, sink, expr)
    },
}


////////////////////////////////////////////////////////////////////////////////
// Struct Decls
////////////////////////////////////////////////////////////////////////////////

pub StructDef: StructDef = {
    <visibility:Visibility> "struct" "shape" <name:Ident> <params:TypeDefParams?>
        <fields:StructField*>
    "end"
    => {
        StructDef {
            name,
            params: Context::from(params.unwrap_or(vec![])),
            visibility,
            fields,
        }
    }
}

pub StructField: StructField = {
    "field" <ident:Ident> "of" <shape:Shape> => StructField(ident, shape),
}


////////////////////////////////////////////////////////////////////////////////
// Function Decls
////////////////////////////////////////////////////////////////////////////////

pub FnDef: FnDef = {
    <l:@L> <visibility:Visibility> "fn" <name:Ident> <params:FnParams> "->" <result:Shape>
        <body:Expr>
    "end" <r:@R> => {
        FnDef {
            name: name.to_string(),
            params,
            result,
            visibility,
            body,
        }
    }

}

// pub FnGenerics = TypeDefParams

pub FnParams: Context<ShapeRef> = {
    "(" <param0:FnParam> <param_rest:("," FnParam)*> (","?) ")" => {
        let mut params = Context::empty();
        let (param0, shape0) = param0;
        params = params.extend(param0, shape0);
        for (_, (parami, shapei)) in param_rest {
            params = params.extend(parami, shapei);
        }
        params
    },
}


pub FnParam: (String, ShapeRef) = {
    <ident:Ident> "of" <shape:Shape> => (ident, shape),
}



////////////////////////////////////////////////////////////////////////////////
// Enum Decls
////////////////////////////////////////////////////////////////////////////////

pub EnumDef: EnumDef = {
    <visibility:Visibility> "enum" "shape" <name:Ident> <params:TypeDefParams?>
        <alts:EnumAlt*>
    "end"
    => {
        EnumDef {
            name,
            params: Context::from(params.unwrap_or(vec![])),
            visibility,
            alts,
        }
    }
}

pub EnumAlt: EnumAlt = {
    <ctor_name:Ctor> <payload_shape:("of" <Shape>)?> => {
        EnumAlt(ctor_name, payload_shape)
    }
}


pub TypeDefParams: Vec<(String, Kind)> = {
    "<" <param0:TypeDefParam> <param_rest:("," TypeDefParam)*> ">" => {
        let mut result = vec![param0];
        for (_s, param) in param_rest {
            result.push(param);
        }
        result
    },
}

pub TypeDefParam: (String, Kind) = {
    <ident:Ident> "of" "Nat" => (ident, Kind::Nat),
    <ident:Ident> "of" "Shape" => (ident, Kind::Shape),
}


////////////////////////////////////////////////////////////////////////////////
// Literals
////////////////////////////////////////////////////////////////////////////////

pub Nat: u64 = {
    <n:r"[0-9]+"> => n.parse().unwrap(),
}

pub Value: Value = {
    "true" => Value::Bit(true),
    "false" => Value::Bit(false),
    <n:r"[0-9]+"> => Value::Word(n.parse().unwrap()),
}

pub TupleElts: Vec<Box<Expr>> = {
    <e0:Expr> <e_rest:("," <Expr>)*> => {
        let mut result = vec![e0];
        for e in e_rest {
            result.push(e);
        }
        result
    }
}

pub Visibility: Visibility = {
    <visibility:"pub"?> => if visibility.is_some() { Visibility::Public } else { Visibility::Private }
}


////////////////////////////////////////////////////////////////////////////////
// Refs
////////////////////////////////////////////////////////////////////////////////

pub Domain: DomainRef = {
    <ident:Ident> => DomainRef(ident),
}

pub ModDefRef: ModDefRef = {
    <ident:Ident> => ModDefRef(ident.to_string())
}

pub GateRef: GateRef = {
    <ident:Ident> => GateRef(ident.to_string())
}

pub TerminalRef: TerminalRef = {
    <component_name:Ident> "." <port_name:Ident> => TerminalRef(component_name, port_name)
}

pub Shape: ShapeRef = {
    <ident:Ident> "<" <shape_params:ShapeArgs> ">" => ShapeRef(ident, shape_params),
    <ident:Ident> => ShapeRef(ident, vec![]),
}

pub ShapeArgs: Vec<ShapeArg> = {
    <shape_param0:ShapeArg> <shape_param_rest:("," ShapeArg)*> => {
        let mut result = vec![shape_param0];
        for (_s, shape_param) in shape_param_rest {
            result.push(shape_param);
        }
        result
    }
}

pub ShapeArg: ShapeArg = {
    <n:Nat> => ShapeArg::Nat(n),
    <shape:Shape> => ShapeArg::Shape(shape),
}


////////////////////////////////////////////////////////////////////////////////
// Expressions
////////////////////////////////////////////////////////////////////////////////

pub Expr: Box<Expr> = {
    <l:@L> "cast" <e:Expr> "as" <shape:Shape> <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Cast(loc, e, shape))
    },
    <l:@L> "let" <v:Ident> <shape:("of" Shape)?> "=" <def:Expr> ";" <body:Expr> <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Let(loc, v, def, shape.map(|x| x.1), body))
    },
    <l:@L> "let" "tuple" "(" <id0:Ident> <id_rest:("," Ident)*> ")" "=" <def:Expr> ";" <body:Expr> <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        let mut ids = vec![id0];
        for (_, id) in id_rest {
            ids.push(id);
        }
        Box::new(Expr::LetTuple(loc, ids, def, body))
    },
    <l:@L> "match" <subject:Expr> "{"
        <patterns:MatchArm*>
    "}" <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Match(loc, subject, patterns))
    },
    <l:@L> "if" <subject:Expr> "{"
        <expr0:Expr>
    "}" "else" "{"
        <expr1:Expr>
    "}" <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::If(loc, subject, expr0, expr1))
    },
    <expr:ExprEq> => expr,
}

pub ExprEq: Box<Expr> = {
    <l:@L> <op0:ExprAdd> "==" <op1:ExprEq> <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Eq(loc, op0, op1))
    },
    <l:@L> <op0:ExprAdd> "!=" <op1:ExprEq> <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Neq(loc, op0, op1))
    },
    <l:@L> <op0:ExprAdd> "<" <op1:ExprEq> <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::BinOp(loc, BinOp::LessThan, op0, op1))
    },
    <expr:ExprAdd> => expr,
}

pub ExprAdd: Box<Expr> = {
    <l:@L> <op0:ExprCall> "+" <op1:ExprAdd> <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::BinOp(loc, BinOp::Add, op0, op1))
    },
    <l:@L> <op0:ExprCall> "-" <op1:ExprAdd> <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::BinOp(loc, BinOp::Sub, op0, op1))
    },
    <expr:ExprCall> => expr,
}

pub ExprCall: Box<Expr> = {
    <l:@L> <fn_name:Ident> "(" <args:CallArgs> ")" <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Call(loc, FnRef(fn_name), args))
    },
    <l:@L> <expr:ExprCall> "[" <index:Slice> "]" <end:"?"?> <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Slice(loc, expr, index))
    },
    <expr:ExprDot> => expr,
}

pub CallArgs: Vec<Box<Expr>> = {
    <e0:Expr> <e_rest:("," <Expr>)*> => {
        let mut result = vec![e0];
        for e in e_rest {
            result.push(e);
        }
        result
    }
}

pub Slice: Box<Expr> = {
    <expr: Expr> => expr,
}

pub ExprDot: Box<Expr> = {
    <l:@L> <e:ExprBase> <fields:("." Ident)+> <r:@R> => {
        let mut result = e;
        for (_dot, field) in &fields {
            let loc = Loc::new("Top.bitsy".to_string(), l, r);
            result = Box::new(Expr::Field(loc, result, field.to_string()))
        }
        result
    },
    <expr:ExprBase> => expr,
}

pub ExprBase: Box<Expr> = {
    <l:@L> <x:Ident> <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Var(loc, x))
    },
    <l:@L> <value:Value> <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Lit(loc, value))
    },
    <l:@L> "${" <struct_fields:StructFields> "}" <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Struct(loc, struct_fields))
    },
    <l:@L> "@" <ctor_name:Ident> <payload:( "(" Expr ")")?>  <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Enum(loc, ctor_name, payload.map(|p| p.1)))
    },
    <l:@L> "tuple" "(" <elts:TupleElts?>")" <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        Box::new(Expr::Tuple(loc, elts.unwrap_or_default()))
    },
    <l:@L> "?" <r:@R> => {
        let loc = Loc::new("Top.bitsy".to_string(), l, r);
        let contents = "";
        Box::new(Expr::Hole(loc, contents.to_string()))
    },
    "(" <expr:Expr> ")" => expr,
}

pub MatchArm: MatchArm = {
    <pattern:MatchPattern> "=>" <expr:Expr> ";" => MatchArm(pattern, expr)
}

pub MatchPattern: Box<MatchPattern> = {
    <ctor:Ctor> <args: MatchPatternArgs?> => Box::new(MatchPattern::Ctor(ctor, args.unwrap_or(vec![]))),
    <v:Ident> => Box::new(MatchPattern::Var(v)),
    <v:Value> => Box::new(MatchPattern::Lit(v)),
    "otherwise" => Box::new(MatchPattern::Otherwise),
    "tuple" "(" <id0:Ident> <id_rest:("," Ident)*> ")" => {
        let mut ids = vec![id0];
        for (_, id) in id_rest {
            ids.push(id);
        }
        Box::new(MatchPattern::Tuple(ids))
    },
}

pub MatchPatternArgs: Vec<Box<MatchPattern>> = {
    "(" <first:MatchPattern> <rest:("," MatchPattern)*> ")" => {
        let mut results = vec![first];
        for pat in rest {
            results.push(pat.1);
        }
        results
    }
}

pub StructFields: Vec<(FieldName, Box<Expr>)> = {
    <field0:(Ident "=" Expr )> <field_rest:("," Ident "=" Expr)*> ","? => {
        let mut results = vec![(field0.0.to_string(), field0.2).clone()];
        for field in &field_rest {
            results.push((field.1.to_string(), field.3.clone()));
        }
        results
    }
}

////////////////////////////////////////////////////////////////////////////////
// Other
////////////////////////////////////////////////////////////////////////////////

pub Ctor: String = {
    "@" <name:Ident> => name,
}

pub Ident: String = {
    <ident:r"[_A-Za-z][_A-Za-z0-9]*"> => ident.to_string()
}


////////////////////////////////////////////////////////////////////////////////
// Comments
////////////////////////////////////////////////////////////////////////////////

match {
    r"//[^\n\r]*[\r\n]" => {},
    r"[\r\n]*" => {},
    r"/\*[^*]*\*/" => {},
    r" " => {},
    _,
}
