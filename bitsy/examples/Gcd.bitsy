pub enum shape Valid<S of Shape>
    @Invalid
    @Valid of S
end

enum shape GcdState
    @Idle
    @Running of GcdOps
    @Done of Word<16>
end

struct shape GcdOps
    field x of Word<16>
    field y of Word<16>
end

fn sort(x of Word<16>, y of Word<16>) -> Tuple<Word<16>, Word<16>>
    if x < y {
        tuple(x, y)
    } else {
        tuple(y, x)
    }
end

pub mod Gcd
    port io
        incoming ops of Valid<GcdOps>
        outgoing gcd of Valid<Word<16>>

    reg state of GcdState init @Idle

    wire state.set <= match state.val {
        @Idle => (
            match io.ops {
                @Invalid => @Idle;
                @Valid(operands) => @Running(operands);
            }
        );
        @Running(running) => (
            if running.x == running.y {
                @Done(running.x)
            } else {
                let tuple(min, max) = sort(running.x, running.y);
                @Running(
                    ${
                        x = min,
                        y = max - min,
                    }
                )
            }
        );
        @Done(result) => @Idle;
    }

    wire io.gcd <= match state.val {
        @Done(result) => @Valid(result);
        otherwise => @Invalid;
    }
end
