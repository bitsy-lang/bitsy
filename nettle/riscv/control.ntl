mod control {
    incoming opcode of Word<7>;
    incoming funct3 of Word<3>;
    incoming funct7 of Word<7>;

    outgoing branch of Word<1>;
    outgoing mem_read of Word<1>;
    outgoing mem_write of Word<1>;
    outgoing mem_to_reg of Word<1>;
    outgoing alu_op of Word<4>;
    outgoing alu_source of Word<1>;
    outgoing reg_write of Word<1>;

    node OP of Word<7>; OP := 51w7;
    node OP_IMM of Word<7>; OP_IMM := 19w7;
    node LOAD of Word<7>; LOAD := 3w7;
    node STORE of Word<7>; STORE := 35w7;
    node JAL of Word<7>; JAL := 111w7;
    node BRANCH of Word<7>; BRANCH := 99w7;
    node LUI of Word<7>; LUI := 55w7;
    node AUIPC of Word<7>; AUIPC := 23w7;
    node JALR of Word<7>; JALR := 103w7;

    branch := opcode == BRANCH || opcode == JALR || opcode == JAL;

    mem_read := opcode == LOAD;
    mem_write := opcode == STORE;
    mem_to_reg := mem_read;
    alu_op := if funct3 == 0w3 { // ADD/ADDI
        ALUOP_ADD
    } else {
        0w4
    };
    alu_source := opcode == LOAD || opcode == STORE;
    reg_write := opcode == OP || opcode == OP_IMM || opcode == LOAD;

    node ALUOP_AND of Word<4>; ALUOP_AND := 0w4;
    node ALUOP_OR  of Word<4>; ALUOP_OR := 1w4;
    node ALUOP_ADD of Word<4>; ALUOP_ADD := 2w4;
    node ALUOP_SUB of Word<4>; ALUOP_SUB := 6w4;
}
