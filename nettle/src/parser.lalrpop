use crate::ast::*;

grammar;

pub Nettle: Nettle = {
    "domain" "{"
        <domains:Domain*>
    "}"
    "signals" "{"
        <signals:Signal*>
    "}"
    => Nettle {
            domains,
            signals,
        },
}

pub Signal: Signal = {
    <path:Path> ":" <shape:Shape> "@" <domain:Ident> "{"
        <attrs:Attr*>
    "}" => {
        Signal {
            path,
            shape,
            domain: Domain(domain),
            attrs,
        }
    },
}

pub Domain: Domain = {
    <name:Ident> "{" "}" => Domain(name),
}

pub Attr: Attr = {
    "input" ";" => Attr::InputPort,
    "output" ";" => Attr::OutputPort,
    "peek" <path:Path> ";" => Attr::Peek(path),
    "prev" <path:Path> ";" => Attr::Prev(path),
    "init" <value:Value> ";" => Attr::Init(value),
    "gate" <gate:Ident> "(" <paths:PathList> ")" ";" => Attr::Gate(gate, paths),
}

pub Path: String = {
    <component_path_parts:ComponentPath*> <terminal:Ident> => format!("{}.{terminal}", component_path_parts.join(".")),
}

pub PathList: Vec<String> = {
    <mut paths:(<Path> ",")*> <last:Path?> => {
        if let Some(last_path) = last {
            paths.push(last_path);
        }
        paths
    }
}

pub ComponentPath: String = {
    <component:Ident> "." => component.to_string(),
}

pub Shape: Shape = {
    <ident:Ident> "<" <n:Nat> ">" => Shape(ident, vec![ShapeParam::Nat(n)]),
    <ident:Ident> => Shape(ident, vec![]),
}

pub Value: Value = {
    "true" => Value::Bool(true),
    "false" => Value::Bool(false),
    "X" => Value::Unobservable,
    <n:r"[0-9]+"> => Value::Word(n.parse().unwrap()),
}

pub Nat: u64 = {
    <n:r"[0-9]+"> => n.parse().unwrap(),
}

pub Ident: String = {
    <ident:r"[_A-Za-z][_A-Za-z0-9]*"> => ident.to_string()
}

match {
    r"//[^\n\r]*[\r\n]" => {},
    r"[\r\n]*" => {},
    r" " => {},
    _,
}
